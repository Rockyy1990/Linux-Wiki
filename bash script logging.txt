Um ein Bash-Skript in Arch Linux zu erstellen, das eine Log-Datei mit dem Datum und der Uhrzeit von Beginn bis Ende des Skriptes in das Home-Verzeichnis (`~/`) schreibt, kannst du das folgende Beispiel verwenden. In diesem Skript verwenden wir `date` zum Protokollieren von Zeiten.

Hier ist ein einfaches Beispiel für ein Bash-Skript:

```bash
#!/bin/bash

# Definiere Log-Datei
LOG_FILE=~/script_log.txt

# Schreibe Startzeit in die Log-Datei
echo "Skript gestartet am: $(date)" >> $LOG_FILE

# Hier kannst du deine Skriptbefehle einfügen
# Beispielbefehle
echo "Führe einige Aufgaben aus..." >> $LOG_FILE
sleep 2 # Simuliere eine Aufgabe durch Schlafen für 2 Sekunden
echo "Aufgabe 1 abgeschlossen" >> $LOG_FILE

echo "Führe eine weitere Aufgabe aus..." >> $LOG_FILE
sleep 2 # Simuliere eine weitere Aufgabe
echo "Aufgabe 2 abgeschlossen" >> $LOG_FILE

# Schreibe Endzeit in die Log-Datei
echo "Skript beendet am: $(date)" >> $LOG_FILE
```

### Schritt-für-Schritt-Anleitung:

1. **Skript erstellen**:
   Erstelle eine neue Datei für das Skript. Du kannst dies mit einem Texteditor wie `nano`, `vim` oder `gedit` tun. Zum Beispiel:

   ```bash
   nano ~/mein_script.sh
   ```

2. **Skriptinhalt einfügen**:
   Kopiere den obigen Skriptinhalt in die Datei.

3. **Skript ausführbar machen**:
   Speichere die Datei und mache das Skript ausführbar:

   ```bash
   chmod +x ~/mein_script.sh
   ```

4. **Skript ausführen**:
   Führe das Skript aus:

   ```bash
   ~/mein_script.sh
   ```

5. **Log-Datei anzeigen**:
   Du kannst die Log-Datei mit einem Texteditor oder einem Befehl wie `cat` anzeigen:

   ```bash
   cat ~/script_log.txt
   ```

Das Skript protokolliert den Zeitpunkt, zu dem es gestartet und beendet wurde, sowie einige Beispielarbeitsschritte. Du kannst die Befehle im Skript nach deinen Wünschen anpassen.